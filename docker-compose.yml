version: '3.8'

services:
  api:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8000:8080"  # Map host 8000 to container 8080 (Dockerfile uses PORT=8080)
    environment:
      # Override container .env with production values
      - ENVIRONMENT=production
      - DEBUG=false
      - HOST=0.0.0.0
      - PORT=8080  # Match Dockerfile PORT
      - RELOAD=false
      - LOG_LEVEL=INFO
      
      # Security (override with secure values)
      - SECRET_KEY=${SECRET_KEY:-your-super-secret-key-change-in-production-please}
      - ACCESS_TOKEN_EXPIRE_MINUTES=${ACCESS_TOKEN_EXPIRE_MINUTES:-60}
      - ALGORITHM=${ALGORITHM:-HS256}
      
      # Database
      - DATABASE_URL=${DATABASE_URL:-sqlite:///./app.db}
      - DATABASE_ECHO=${DATABASE_ECHO:-false}
      
      # Redis (optional)
      - REDIS_URL=${REDIS_URL:-}
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
      
      # OpenTelemetry
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317
      - OTEL_SERVICE_NAME=${OTEL_SERVICE_NAME:-fastapi-backend}
      - OTEL_SERVICE_VERSION=${OTEL_SERVICE_VERSION:-1.0.0}
      
      # External services (optional)
      - EXTERNAL_API_URL=${EXTERNAL_API_URL:-}
      - EXTERNAL_API_KEY=${EXTERNAL_API_KEY:-}
    depends_on:
      otel-collector:
        condition: service_healthy
      fluent-bit:
        condition: service_started
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        labels: "service_name"
    labels:
      - "service_name=fastapi-backend"
    networks:
      - fastapi-backend-network
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M

  jaeger:
    image: jaegertracing/all-in-one:1.57.0
    environment:
      - COLLECTOR_OTLP_ENABLED=true
      - COLLECTOR_ZIPKIN_HOST_PORT=:9411
    ports:
      - "16686:16686"   # Jaeger UI
      - "4317:4317"     # OTLP gRPC (for otel-collector)
      - "4318:4318"     # OTLP HTTP (for otel-collector)
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:16686"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    networks:
      - fastapi-backend-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M

  otel-collector:
    image: otel/opentelemetry-collector-contrib:0.100.0
    command: ["--config=/etc/otel-collector-config.yaml"]
    volumes:
      - ./scripts/opentelemetry/otel-collector-config.yaml:/etc/otel-collector-config.yaml:ro
    ports:
      - "14317:4317"   # OTLP gRPC receiver
      - "14318:4318"   # OTLP HTTP receiver
      - "13133:13133"  # Health check endpoint (accessible from host)
    depends_on:
      jaeger:
        condition: service_healthy
      tempo:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:13133"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    networks:
      - fastapi-backend-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M

  # Fluent Bit for log collection
  fluent-bit:
    image: fluent/fluent-bit:3.0.7
    ports:
      - "24224:24224"  # Forward input
      - "24224:24224/udp"
    volumes:
      - ./scripts/logging/fluent-bit.conf:/fluent-bit/etc/fluent-bit.conf:ro
      - ./scripts/logging/parsers.conf:/fluent-bit/etc/parsers.conf:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    depends_on:
      loki:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - fastapi-backend-network
    deploy:
      resources:
        limits:
          cpus: '0.3'
          memory: 128M

  # Loki for log storage
  loki:
    image: grafana/loki:3.0.0
    ports:
      - "3100:3100"
    volumes:
      - ./scripts/logging/loki-config.yaml:/etc/loki/local-config.yaml:ro
      - loki-data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3100/ready"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    networks:
      - fastapi-backend-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  # Tempo for distributed tracing storage
  tempo:
    image: grafana/tempo:2.4.1
    command: [ "-config.file=/etc/tempo.yaml" ]
    volumes:
      - ./scripts/tracing/tempo-config.yaml:/etc/tempo.yaml:ro
      - tempo-data:/tmp/tempo
    ports:
      - "3200:3200"   # Tempo HTTP API
      - "4327:4317"   # OTLP gRPC receiver (mapped to avoid conflict)
      - "4328:4318"   # OTLP HTTP receiver (mapped to avoid conflict)
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3200/ready"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    networks:
      - fastapi-backend-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  # Grafana for log and trace visualization
  grafana:
    image: grafana/grafana:10.4.2
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana-data:/var/lib/grafana
      - ./scripts/logging/grafana-datasources.yaml:/etc/grafana/provisioning/datasources/datasources.yaml:ro
      - ./scripts/logging/grafana-dashboards.yaml:/etc/grafana/provisioning/dashboards/dashboards.yaml:ro
      - ./scripts/logging/dashboards:/var/lib/grafana/dashboards:ro
    depends_on:
      loki:
        condition: service_healthy
      tempo:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    networks:
      - fastapi-backend-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M

networks:
  fastapi-backend-network:
    driver: bridge

volumes:
  loki-data:
    driver: local
  grafana-data:
    driver: local
  tempo-data:
    driver: local
